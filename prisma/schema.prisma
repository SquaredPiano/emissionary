// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  avatar    String?
  bio       String?
  location  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Competition & Achievements fields
  level               Int     @default(1)
  experience          Int     @default(0)
  totalPoints         Int     @default(0)
  currentStreak       Int     @default(0)
  longestStreak       Int     @default(0)
  lastUploadDate      DateTime?
  totalReceipts       Int     @default(0)
  totalEmissions      Decimal @default(0)
  greenChoices        Int     @default(0) // Count of low-emission choices
  weeklyGreenWeeks    Int     @default(0) // Count of weeks with emissions below 50kg

  // Relations
  receipts Receipt[]
  userAchievements UserAchievement[]
  streaks Streak[]

  @@map("users")
}

model Receipt {
  id          String   @id @default(cuid())
  userId      String
  imageUrl    String?
  merchant    String
  total       Decimal
  date        DateTime
  currency    String   @default("USD")
  taxAmount   Decimal? @default(0)
  tipAmount   Decimal? @default(0)
  paymentMethod String?
  receiptNumber String?
  totalCarbonEmissions Decimal @default(0) // Total carbon emissions for this receipt
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  receiptItems ReceiptItem[]

  @@map("receipts")
}

model ReceiptItem {
  id          String   @id @default(cuid())
  receiptId   String
  name        String
  quantity    Decimal
  unitPrice   Decimal
  totalPrice  Decimal
  category    String?
  brand       String?
  barcode     String?
  description String?
  carbonEmissions Decimal @default(0) // Carbon emissions in kg CO2e
  confidence  Decimal @default(0.8)   // OCR confidence score
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  receipt Receipt @relation(fields: [receiptId], references: [id], onDelete: Cascade)

  @@map("receipt_items")
}

// Competition & Achievements Models

model Badge {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  icon        String   // Emoji or icon identifier
  rarity      BadgeRarity
  points      Int      @default(10)
  requirement BadgeRequirement
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userAchievements UserAchievement[]

  @@map("badges")
}

model UserAchievement {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String
  earnedAt  DateTime @default(now())
  progress  Int      @default(0) // Current progress towards the badge
  isCompleted Boolean @default(false)

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@map("user_achievements")
}

model Streak {
  id        String   @id @default(cuid())
  userId    String
  type      StreakType
  current   Int      @default(0)
  longest   Int      @default(0)
  lastDate  DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@map("streaks")
}

enum BadgeRarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
}

enum BadgeRequirement {
  FIRST_UPLOAD
  UPLOAD_STREAK_3
  UPLOAD_STREAK_7
  UPLOAD_STREAK_30
  TOTAL_RECEIPTS_10
  TOTAL_RECEIPTS_50
  TOTAL_RECEIPTS_100
  LOW_EMISSIONS_WEEK
  GREEN_WEEKS_5
  GREEN_WEEKS_10
  TOTAL_EMISSIONS_1000
  GREEN_CHOICES_10
  GREEN_CHOICES_50
  PERFECT_WEEK
  EARLY_ADOPTER
}

enum StreakType {
  UPLOAD
  GREEN_CHOICES
  LOW_EMISSIONS
}